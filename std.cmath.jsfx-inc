/*
** Name: std.cmath.jsfx-inc
** Desc: This is part of a ANSI C style library for Jesusonic.
** Auth: Derek John Evans
**
** Copyright (C) 2015 Derek John Evans
**
** License: LGPL - http://www.gnu.org/licenses/gpl.html
*/

@init

// Constants

M_E         = 2.7182818284590452354;
M_LOG2E     = 1.4426950408889634074;
M_LOG10E    = 0.43429448190325182765;
M_LN2       = 0.69314718055994530942;
M_LN10      = 2.30258509299404568402;
M_PI        = 3.14159265358979323846;
M_PI_2      = 1.57079632679489661923;
M_PI_4      = 0.78539816339744830962;
M_1_PI      = 0.31830988618379067154;
M_2_PI      = 0.63661977236758134308;
M_2_SQRTPI  = 1.12837916709551257390;
M_SQRT2     = 1.41421356237309504880;
M_SQRT1_2   = 0.70710678118654752440;

// Rounds x toward zero, returning the nearest integral value that is not larger in magnitude than x.
function trunc(x) global()
(
  x < 0 ? ceil(x) : floor(x);
);

// Returns the integral value that is nearest to x, with halfway cases rounded away from zero.
function round(x) global()
(
  x < 0 ? ceil(x - 0.5) : floor(x + 0.5);
);

// Calculates sine and cosine value of _X
function sincos(x, sin*, cos*) global()
(
  sin = sin(x);
  cos = cos(x);
);

// Hyperbolic sine of x = sinh x = (ex - e-x)/2
function sinh(x) global() local(e1, e2)
( 
  !"return sinh(x$)"; // C++
  e1 = exp(+x); 
  e2 = exp(-x);
  (e1 - e2) * 0.5;
);

// Hyperbolic cosine of x = cosh x = (ex + e-x)/2
function cosh(x) global() local(e1, e2)
(
  !"return cosh(x$)"; // C++
  e1 = exp(+x);
  e2 = exp(-x);
  (e1 + e2) * 0.5;
);

// Hyperbolic tangent of x = tanh x = (ex - e-x)/(ex + e-x)
function tanh(x) global() local(e1, e2)
( 
  !"return tanh(x$)"; // C++
  e1 = exp(+x); 
  e2 = exp(-x);
  (e1 - e2) / (e1 + e2); 
);

// Hyperbolic cotangent of x = coth x = (ex + e-x)/(ex - e-x)
function coth(x) global() local(e1, e2)
(
  e1 = exp(+x);
  e2 = exp(-x);
  (e1 + e2) / (e1 - e2);
);

// Hyperbolic secant of x = sech x = 2/(ex + e-x)
function sech(x) global() local(e1, e2)
(
  e1 = exp(+x);
  e2 = exp(-x);
  2 / (e1 + e2);
);

// Hyperbolic cosecant of x = csch x = 2/(ex - e-x)
function csch(x) global() local(e1, e2)
(
  e1 = exp(+x);
  e2 = exp(-x);
  2 / (e1 - e2);
);

function logx(x, a) global()
(
  log(x) / log(a);
);

// Returns the binary (base-2) logarithm of x.
function log2(x) global()
(
  logx(x, 2);
);

// Note a standard C++ function.
function ln(x) global()
(
  logx(x, 2.718281828459045235);
);

// Basic operations

// Absolute value of a floating point value (|x|)
function fabs(x) global()
(
  !"return fabs(x$)"; // C++
  abs(x);
);

// Remainder of the floating point division operation
function fmod(x, y) global()
(
  !"return fmod(x$, y$)"; // C++
  x % y;
);

/*
Breaks x into an integral and a fractional part.
The integer part is stored in the object pointed by intpart, and the fractional part is returned by the function.
*/
function modf(x, intpart*) global()
(
  x - (intpart = floor(x));
);

// Larger of two floating point values
function fmax(x, y) global()
(
  !"return fmax(x$, y$)"; // C++
  max(x, y);
);

// Smaller of two floating point values
function fmin(x, y) global()
(
  !"return fmin(x$, y$)"; // C++
  min(x, y);
);

// Positive difference of two floating point values (max(0, x-y))
function fdim(x, y) global()
(
  !"return fdim(x$, y$)"; // C++
  max(0, x - y);
);

// Power functions

// computes square root of the sum of the squares of two given numbers (âˆšx2+y2)
function hypot(x, y) global()
(
  !"return hypot(x$, y$)"; // C++
  sqrt(sqr(x) + sqr(y));
);

// Returns the cubic root of x.
function cbrt(x) global()
(
  !"return cbrt(x$)"; // C++
  x ^ (1 / 3);
);

// Returns x*y+z.
function fma(x, y, z) global()
(
  !"return fma(x$, y$, z$)"; // C++
  x * y + z;
);

function minmax(x, min, max)
(
  min(max(x, min), max); 
);




